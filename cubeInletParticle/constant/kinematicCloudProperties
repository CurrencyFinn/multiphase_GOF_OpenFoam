/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      reactingCloud1Properties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solution
{
    active          true;
    coupled         false;
    transient       yes;
    cellValueSourceCorrection off;
    maxCo           0.3;

    interpolationSchemes
    {
        rho             cell;
        U               cellPoint;
        mu              cell;
    }

    integrationSchemes
    {
        U               Euler;
    }
}

constantProperties
{
    rho0            1.2;           // particle density (kg/m3)
    //youngsModulus   6e8;   // constant of proportionality relating the deformation to the applied stress for your particles (N/m2)
    //poissonsRatio   0.35;    // ratio of traverse to axial strain for your particles (dimensionless)
    constantVolume  true;
}

subModels
{
    particleForces
    {
        sphereDrag;
        gravity;
    }

    injectionModels
    {
        // model1
        // {
        //     type            patchFlowRateInjection;
        //     patch           inlet-velocity;
        //     patchName       inlet-velocity;
        //     duration        0.01;                   //Total duration of particle injection
        //     concentration   1;                    // Concentration profile of particle volume to carrier volume   
        //     parcelConcentration 0.6;
        //     parcelsPerSecond    500;                //Injected parcels/particles per second
        //     meanParticleDiameter 0.003;  
        //     nParticle        1000;                    // number of particles to be injected
        //     massTotal       0.05;                      //total mass to be injected (kg)
        //     parcelBasisType fixed;                  // options of how to represent your particles. besides 'fixed' they can be represented by 'number' or 'mass'
        //     SOI             0;                      //start of injection (time in [s])
        //     sizeDistribution
        //     {
        //         type        fixedValue;             // particle have fixed sizes Yes
        //          fixedValueDistribution             // the sizes the particels can have ? Yes. Instead of specifying each individual size you could use a size distribution profile i.e. type normal;
        //         {
        //             value   0.003;             
        //             // value   0.01;
        //             // value   0.001;
        //             // value   0.015;
        //             // value   0.004;
        //             // value   0.009;
        //         }
        //     }
        // }

        // model1
        // {
        //     type patchInjection;
        //     parcelBasisType mass; // mass = , number np = massTotal/(rho*volumeTotal), fixed np = number of particles
        //     patchName inlet-velocity;
        //     patch inlet-velocity;       
        //     maxParticlesPerParcel 1;      
        //     U0 (0 0 0);
        //     nParticle 1;    
        //     parcelsPerSecond 500;
        //     sizeDistribution
        //             {
        //                 type        fixedValue;
        //                 fixedValueDistribution
        //                 {
        //                     value   0.01;
        //                 }
        //             }
        //     flowRateProfile constant 1;
        //     massTotal 0.3;  //Choosing nParticle to be a fixed value, massTotal variable now             does not determine anything.
        //     SOI 0;
        //     duration 0.1;
        //     massFlowRate 0.01;//0.0001;//0.004583;
        // }
        model1
        {
            type patchInjection;
            parcelBasisType fixed; 
            patchName inlet-velocity;
            patch inlet-velocity;            
            U0 (0 0 0);
            nParticle 1;    
            parcelsPerSecond 500;
            sizeDistribution
                    {
                        type        fixedValue;
                        fixedValueDistribution
                        {
                            value   0.01;
                        }
                    }
            flowRateProfile constant 1;
            massTotal 0;  //Choosing nParticle to be a fixed value, massTotal variable now             does not determine anything.
            SOI 0;
            duration 0.1;
        }
    }

    dispersionModel none;

    patchInteractionModel localInteraction; //none

    localInteractionCoeffs
    {
        patches
        (
            cylinder {
                type stick;
            }

            pressure-outlet {
                type escape;
            }
            ".*"
            {
                type rebound;  // For Un = normal speed; Ut = tangential speed
                e    1;        // e = (Un_reflected / Un_incident)
                mu   0;        // mu = [1 - (Ut_reflected / Ut_incident)]
            }
        );
    }

    surfaceFilmModel none;

    collisionModel none;

    // pairCollisionCoeffs
    // {
    //     maxInteractionDistance  0.006;

    //     writeReferredParticleCloud no;

    //     pairModel pairSpringSliderDashpot;

    //     pairSpringSliderDashpotCoeffs
    //     {
    //         useEquivalentSize   no;
    //         alpha               0.12;
    //         b                   1.5;
    //         mu                  0.52;
    //         cohesionEnergyDensity 0;
    //         collisionResolutionSteps 12;
    //     };

    //     wallModel    wallLocalSpringSliderDashpot;

    //     wallLocalSpringSliderDashpotCoeffs
    //     {
    //         useEquivalentSize no;
    //         collisionResolutionSteps 12;
    //         "cylinder"
    //         {
    //             youngsModulus   1e10;
    //             poissonsRatio   0.23;
    //             alpha           0.12;
    //             b               1.5;
    //             mu              0.43;
    //             cohesionEnergyDensity 0;
    //         }
    //     };
    // }

    radiation off;

    stochasticCollisionModel none;
}

cloudFunctions
{
    particleTracks1
    {
        type            particleTracks;
        trackInterval   5;
        maxSamples      10000000;
        resetOnWrite    yes;
    }
}

// ************************************************************************* //
